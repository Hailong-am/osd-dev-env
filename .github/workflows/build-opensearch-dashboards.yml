name: Build OSD from manifest

on:
  workflow_call:
    inputs:
      deployment_name:
        description: "The name of the deployment"
        required: true
        type: string
      # TODO: the version should be retrieved from OSD package.json
      version:
        description: "The version of OpenSearch-Dashboards"
        required: true
        type: string
      node_version:
        description: "Nodejs version"
        required: false
        type: string
      essential_plugins:
        description: "The essential plugins (comma-separated list)"
        required: false
        type: string
    secrets:
      aws_access_key_id:
        required: true
      aws_secret_access_key:
        required: true

jobs:
  build-opensearch-dashboards:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: "3.9"
      NODE_VERSION: ${{ inputs.node_version || '18.19.0' }}
      VERSION: ${{ inputs.version }}
      ARCH: "x64"
      PLATFORM: "linux"
      AWS_REGION: "us-east-1"
      ECR_REGISTRY_ALIAS: "r9h9r7k4"
      ECR_REPOSITORY: "opensearch-dashboards-dev"
      DEPLOYMENT_NAME: ${{ inputs.deployment_name }}
      ESSENTIAL_PLUGINS: ${{ inputs.essential_plugins }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: opensearch-dev-env
      - uses: actions/checkout@v3
        with:
          repository: opensearch-project/opensearch-build
          ref: main
          path: opensearch-build
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      # - name: Check essential plugin versions
      #   if: ${{ env.ESSENTIAL_PLUGINS != '' }}
      #   run: |
      #     MANIFEST_FILE="opensearch-dev-env/${{ env.DEPLOYMENT_NAME }}/manifests/opensearch-dashboards.yml"
      #     EXPECTED_VERSION="${{ env.VERSION }}"
      #     IFS=',' read -ra PLUGINS <<< "${{ env.ESSENTIAL_PLUGINS }}"
      #     echo "Checking plugin versions against expected version: $EXPECTED_VERSION"
      #     for plugin in "${PLUGINS[@]}"; do
      #       plugin=$(echo "$plugin" | xargs)
      #       echo "Checking plugin: $plugin"
      #       PLUGIN_SECTION=$(yq '.components[] | select(.name == "'$plugin'")' "$MANIFEST_FILE")
      #       if [ -z "$PLUGIN_SECTION" ]; then
      #         echo "Warning: Plugin $plugin not found in manifest"
      #         exit 1
      #       fi
      #       REPO_URL=$(echo "$PLUGIN_SECTION" | yq '.repository')
      #       COMMIT=$(echo "$PLUGIN_SECTION" | yq '.ref')
      #       if [ "$REPO_URL" == "null" ] || [ -z "$REPO_URL" ] || [ "$COMMIT" == "null" ] || [ -z "$COMMIT" ]; then
      #         echo "Warning: Could not find repository info for plugin $plugin"
      #         exit 1
      #       fi
      #       echo "Plugin $plugin repository: $REPO_URL, commit/branch: $COMMIT"
      #       if [[ $REPO_URL =~ github\.com[:/]([^/]+)/([^/]+)(\.git)?$ ]]; then
      #         OWNER=${BASH_REMATCH[1]}
      #         REPO=$(echo "${BASH_REMATCH[2]}" | sed 's/\.git$//')
      #         echo "Repository owner: $OWNER, name: $REPO"
      #         PACKAGE_JSON_URL="https://api.github.com/repos/$OWNER/$REPO/contents/package.json?ref=$COMMIT"
      #         echo "Fetching package.json from: $PACKAGE_JSON_URL"
      #         PACKAGE_JSON_CONTENT=$(curl -s "$PACKAGE_JSON_URL")
      #         if [[ "$PACKAGE_JSON_CONTENT" == *"Not Found"* ]]; then
      #           echo "Error: package.json not found for $plugin at $COMMIT"
      #           exit 1
      #         fi
      #         PACKAGE_JSON=$(echo "$PACKAGE_JSON_CONTENT" | jq -r '.content' | base64 --decode)
      #         PACKAGE_VERSION=$(echo "$PACKAGE_JSON" | jq -r '.version')
      #         if [ -n "$PACKAGE_VERSION" ]; then
      #           echo "Plugin $plugin version from package.json: $PACKAGE_VERSION"
      #           EXPECTED_MAJOR_MINOR=$(echo "$EXPECTED_VERSION" | cut -d. -f1,2)
      #           PACKAGE_MAJOR_MINOR=$(echo "$PACKAGE_VERSION" | cut -d. -f1,2)
      #           if [ "$PACKAGE_MAJOR_MINOR" != "$EXPECTED_MAJOR_MINOR" ]; then
      #             echo "Error: Plugin $plugin major/minor version ($PACKAGE_MAJOR_MINOR) does not match expected major/minor version ($EXPECTED_MAJOR_MINOR)"
      #             exit 1
      #           fi
      #           echo "Plugin $plugin version $PACKAGE_VERSION have compatible versions with $EXPECTED_VERSION"
      #         else
      #           echo "Error: Could not determine version for plugin $plugin"
      #           exit 1
      #         fi
      #       else
      #         echo "Error: Could not parse repository URL for plugin $plugin"
      #         exit 1
      #       fi
      #     done
      #     echo "All essential plugins have compatible versions"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pipenv wheel

          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq
          /usr/local/bin/yq --version
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key_id }}
          aws-secret-access-key: ${{ secrets.aws_secret_access_key }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public
      - name: Build and assemble
        run: |
          cd opensearch-build
          source $NVM_DIR/nvm.sh
          nvm install ${{ env.NODE_VERSION }}

          if [ -f ../opensearch-dev-env/${{ env.DEPLOYMENT_NAME }}/manifests/opensearch-dashboards.yml ]; then
            if [ ! -z "${{ env.ESSENTIAL_PLUGINS }}" ]; then
              IFS=',' read -ra CRITICAL_PLUGINS <<< "${{ env.ESSENTIAL_PLUGINS }}"
              PLUGINS_SPACE_SEPARATED=$(echo "${{ env.ESSENTIAL_PLUGINS }}" | tr ',' ' ')
              echo "Building: essential plugins"
              ./build.sh ../opensearch-dev-env/${{ env.DEPLOYMENT_NAME }}/manifests/opensearch-dashboards.yml --component OpenSearch-Dashboards $PLUGINS_SPACE_SEPARATED --lock --architecture ${{ env.ARCH }} --platform ${{ env.PLATFORM }}
              echo "All essential plugins have been build successfully"
            fi
            
            ./build.sh manifest.lock --architecture ${{ env.ARCH }} --platform ${{ env.PLATFORM }} --incremental --continue-on-error
            ./assemble.sh tar/builds/opensearch-dashboards/manifest.yml
          fi
      - name: Build and push docker image
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: ${{ env.ECR_REGISTRY_ALIAS }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.run_id }}
        run: |
          artifact_name=opensearch-dashboards-${{env.VERSION}}-${{ env.PLATFORM }}-${{ env.ARCH }}.tar.gz
          tarball=$(realpath opensearch-build/tar/dist/opensearch-dashboards/$artifact_name)
          cd ./opensearch-build/docker/release
          ./build-image-single-arch.sh -v $IMAGE_TAG -p opensearch-dashboards -a ${{ env.ARCH }} -f ./dockerfiles/opensearch-dashboards.al2023.dockerfile -t $tarball
          docker images
          docker tag opensearchproject/opensearch-dashboards:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          echo "Pushed docker image: $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG"

          cd ${{ github.workspace }}/opensearch-dev-env
          yq -i '.global.dockerRegistry = "${{ env.REGISTRY }}"' ./${{ env.DEPLOYMENT_NAME }}/opensearch-dashboards.yaml
          yq -i '.image.repository = "${{ env.REGISTRY_ALIAS }}/${{ env.REPOSITORY }}"' ./${{ env.DEPLOYMENT_NAME }}/opensearch-dashboards.yaml
          yq -i '.image.tag = "${{ env.IMAGE_TAG }}"' ./${{ env.DEPLOYMENT_NAME }}/opensearch-dashboards.yaml
      - name: Create pull request
        uses: peter-evans/create-pull-request@v5
        with:
          path: opensearch-dev-env
          commit-message: update ${{ env.DEPLOYMENT_NAME }} opensearch-dashboards image
          title: Update ${{ env.DEPLOYMENT_NAME }} opensearch-dashboards image
          branch: create-pull-request/update-${{ env.DEPLOYMENT_NAME }}-opensearch-dashboards-image
          signoff: true
          delete-branch: true
          add-paths: |
            ${{ env.DEPLOYMENT_NAME }}/opensearch-dashboards.yaml
